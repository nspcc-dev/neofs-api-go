syntax = "proto3";
package state;
option go_package = "github.com/nspcc-dev/neofs-proto/state";

import "bootstrap/types.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.stable_marshaler_all) = true;

// Status service provides node's healthcheck and status info
service Status {
    // Netmap request allows to receive current [bootstrap.SpreadMap](bootstrap.md#bootstrap.SpreadMap)
    rpc Netmap(NetmapRequest) returns (bootstrap.SpreadMap);
    // Metrics request allows to receive metrics in prometheus format
    rpc Metrics(MetricsRequest) returns (MetricsResponse);
    // HealthCheck request allows to check health status of the node.
    // If node unhealthy field Status would contains detailed info.
    rpc HealthCheck(HealthRequest) returns (HealthResponse);
}

// NetmapRequest message to request current node netmap
message NetmapRequest {}

// MetricsRequest message to request node metrics
message MetricsRequest {}

// MetricsResponse contains [][]byte,
// every []byte is marshaled MetricFamily proto message
// from github.com/prometheus/client_model/metrics.proto
message MetricsResponse {
    repeated bytes Metrics = 1;
}

// HealthRequest message to check current state
message HealthRequest {}

// HealthResponse message with current state
message HealthResponse {
    // Healthy is true when node alive and healthy
    bool Healthy  = 1;
    // Status contains detailed information about health status
    string Status = 2;
}
